parameters:
  - name: sqlFolder
    displayName: 'SQL Script Added for Datafix'
    type: string
    default: "Specify the folder name added here"


steps:
  # - checkout: self
  # - script: |
  #     MERGED_BRANCH=$(git log --merges -n 1 --pretty=format:'%P' | cut -d' ' -f2 | xargs git name-rev --name-only)
  #     # echo "##vso[task.setvariable variable=MergedBranchName]$MERGED_BRANCH"
  #     Write-Host "[INFO] Branch Name? : $MERGED_BRANCH"
  #   displayName: "Get Merged Branch Name"  

  - task: PowerShell@2
    displayName: 'Determine the SQL Folder Name'
    inputs:
      targetType: 'inline'
      script: |
        $sqlFolder = "${{parameters.sqlFolder}}"
        $rootFolder = "$(Build.SourcesDirectory)\sqlscripts"
        Write-Host "[INFO] Provided sqlFolder: $sqlFolder"



        Write-Host "[INFO] Branch Name: $(System.PullRequest.SourceBranch)"

        $mergeParents = git -C "$(Build.SourcesDirectory)" log --merges -n 1 --pretty=format:'%P'

        # Extract the second parent (the merged branch)
        $parentCommits = $mergeParents -split " "
        if ($parentCommits.Length -gt 1) {
            $mergedCommit = $parentCommits[1]  # Second parent is the source branch
        } else {
            $mergedCommit = $parentCommits[0]  # Fallback to first parent
        }

        # Get the branch name of the merged commit
        $mergedBranchName = git -C "$(Build.SourcesDirectory)" name-rev --name-only $mergedCommit

        Write-Host "[INFO] Branch Name: $mergedBranchName"





        # Check if sqlFolder is null, empty, or 'latest'
        if ([string]::IsNullOrWhiteSpace($sqlFolder)) {            
            Write-Host "##vso[task.logissue type=error]SQL folder cannot be empty."

            Write-Host "[Info] Can we get branch name here? it is $(Build.SourceBranchName)"



            exit 1  # Fail the pipeline if the input folder name is null or empty
        }else {
            # If a specific sqlFolder is provided, check if it exists
            $sqlFolderPath = Join-Path -Path $rootFolder -ChildPath $sqlFolder

            if (-Not (Test-Path -Path $sqlFolderPath -PathType Container)) {                
                Write-Host "##vso[task.logissue type=error]Specified SQL folder '$sqlFolder' does not exist in '$rootFolder'."
                exit 1  # Fail the pipeline if the folder does not exist
            }

            # Check if the folder is empty
            $folderContents = Get-ChildItem -Path $sqlFolderPath
            if (-Not $folderContents) {                
                Write-Host "##vso[task.logissue type=error]Specified SQL folder '$sqlFolder' is empty."
                exit 1  # Fail the pipeline if the folder is empty
            }

            Write-Host "[SUCCESS] Using specified SQL folder: $sqlFolder"
        }

        # List all files inside sqlFolder (including subfolders, but exclude directories)
        Write-Host "[INFO] Listing all files inside '$sqlFolderPath':"
        Get-ChildItem -Path $sqlFolderPath -Recurse -File | ForEach-Object {
            Write-Host $_.FullName
        }

        # Set the new sqlFolder value as a pipeline variable
        Write-Host "##vso[task.setvariable variable=sqlFolder]$sqlFolder"

    continueOnError: false
  
  - task: CopyFiles@2
    name: CopyFilesToStagingDirectory
    displayName: 'Copy files to Staging Directory'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\sqlscripts\$(sqlFolder)'
      Contents: '**'  # Copies all files and subdirectories recursively
      TargetFolder: '$(build.artifactstagingdirectory)\$(artifactName)'
      CleanTargetFolder: true  # Set to true if you want to clean the target folder before copying  

  - task: PowerShell@2
    name: ReportCopiedFiles
    displayName: 'Report Copied Files'
    inputs:
      targetType: inline
      displayName: 'Report Copied Files'
      script: |
          $destinationFolder = "$(build.artifactstagingdirectory)"
          $copiedFiles = Get-ChildItem -Path $destinationFolder -Recurse -File
          $fileCount = $copiedFiles.Count

          Write-Host "[INFO] SQL Folder: '$(sqlFolder)'"
          Write-Host "[INFO] Total files copied: $fileCount"

          if ($fileCount -gt 0) {
              Write-Host "[INFO] List of copied files:"
              $copiedFiles | ForEach-Object { Write-Host $_.FullName }
          } else {
              Write-Host "[WARNING] No files were copied!"
          }

  - task: PublishBuildArtifacts@1
    displayName: 'Publish SQL Scripts'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)\$(artifactName)'
      artifactName: '$(artifactName)'